// <auto-generated />
using System;
using CrushBot.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrushBot.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("CrushBot.Core.Entities.BotUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DaysVisited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLowWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Sex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEmoji")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.CityName", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CityId", "Language");

                    b.ToTable("CityNames");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.UserFilter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgeAfter")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgeUntil")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Sex")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.UserLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("LikedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LikerUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MatchShown")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LikedUserId");

                    b.HasIndex("LikerUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.BotUser", b =>
                {
                    b.HasOne("CrushBot.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.CityName", b =>
                {
                    b.HasOne("CrushBot.Core.Entities.City", "City")
                        .WithMany("CityNames")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.UserFilter", b =>
                {
                    b.HasOne("CrushBot.Core.Entities.BotUser", "User")
                        .WithOne("Filter")
                        .HasForeignKey("CrushBot.Core.Entities.UserFilter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.UserLike", b =>
                {
                    b.HasOne("CrushBot.Core.Entities.BotUser", null)
                        .WithMany("LikedBy")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrushBot.Core.Entities.BotUser", null)
                        .WithMany("Likes")
                        .HasForeignKey("LikerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrushBot.Core.Entities.BotUser", b =>
                {
                    b.Navigation("Filter");

                    b.Navigation("LikedBy");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("CrushBot.Core.Entities.City", b =>
                {
                    b.Navigation("CityNames");
                });
#pragma warning restore 612, 618
        }
    }
}
